#include "spi_bitbang.h"
#include "windows.h"
#include <stdio.h>

#define serial_spi_read_size  16
#define serial_spi_write_size 16


uint32_t spi_initialize(uint8_t *dst)
{
    dst[0] = SCL_H;
    return 1;
}

uint32_t spi_cs_start(uint8_t *dst)
{
    dst[0] = CS_H | SCL_H;
    dst[1] = 0 | SCL_H;
    return 2;
}

uint32_t spi_cs_end(uint8_t *dst)
{
    dst[0] = CS_H | SCL_H;
    return 1;
}

//CPOL=0,CPHA=0;  第一个跳变沿读取数据
//
uint32_t spi_read(uint8_t *dst)
{
    int i;
     
    for(i=0;i<8;i++)
    {
        
        dst[2*i] = 0;

        dst[2*i+1] = SCL_H;    
    }

    return 16;
}

uint32_t spi_write(uint8_t* dst,uint8_t dat)
{
    int i;
    for(i=0;i<8;i++)
    {
        dst[2*i] = 0;   
        if(dat&0x80)
          dst[2*i+1] = SDO_H | SCL_H;
        else
        {
          dst[2*i+1] = SCL_H;
        }
        dat <<= 1;
          
    }
    return serial_spi_write_size;
}

//CPOL=0,CPHA=1
uint32_t spi_read_mode1(uint8_t *dst)
{
    int i;


    for(i=0;i<8;i++)
    {
        dst[2*i] = SCL_H;


        dst[2*i+1] = 0;
    }
    return 16;
}


//沿的后一时刻
uint32_t spi_write_mode1(uint8_t *dst,uint8_t dat)
{
    int i;
    for(i=0;i<8;i++)
    {
        dst[3*i] = 0;

        dst[3*i + 1] = SCL_H;
        if(dat&0x80)
          dst[3*i+2] = SDO_H;
        else
        {
          dst[3*i +2] = 0;
        }
        dat <<= 1;
        
    }
    return 24;
}

//CPOL=1,CPHA=1
uint32_t spi_write_mode2(uint8_t *dst,uint8_t dat)
{
    int i;
    for(i=0;i<8;i++)
    {
        dst[3*i] = SCL_H;

        dst[3*i + 1] = 0;
        if(dat&0x80)
          dst[3*i+2] = SDO_H | SCL_H;
        else
        {
          dst[3*i +2] = 0 | SCL_H;
        }
        dat <<= 1;
    }
    dst[24] = SCL_H;
    return 25;
}

uint32_t spi_write_mode3(uint8_t *dst,uint8_t dat)
{
    int i;
    for(i=0;i<8;i++)
    {
        dst[3*i] = SCL_H;
        if(dat&0x80)
          dst[3*i+1] = SDO_H;
        else
        {
          dst[3*i+1] = 0;
        }
        dat <<= 1;

         dst[3*i+2] = SCL_H;
    }
    //dst[24] = SCL_H;
    return 16;
}


uint32_t spi_decoder(uint8_t *dst,uint8_t *dat,uint8_t len)
{
    int i,j;
    uint8_t ld;
    for(j = 0;j<len;j++)
    {
        ld = 0x00;
        for(i=0;i<8;i++)
        {
            ld <<= 1;
            if(dst[2*i+1] & SDI_H)
                ld |= 0x01;
            else
            {
                ld &= 0xfe;
            }
  
        }
        printf("%d:%0x\n",j,ld);
        dat[j] = ld;
    }
    return 0;
}